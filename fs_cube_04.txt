#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

struct Light2 {
  vec3 position2;
};

uniform Light light;
uniform Light2 light2;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};

uniform Material material;

void main() {
  // ambient
  vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));

  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);

  vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord));

  // specular
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));



  // diffuse 2
  vec3 lightDir2 = normalize(light2.position2 - aPos);
  float diff2 = max(dot(norm, lightDir2), 0.0);

  vec3 diffuse2 = light.diffuse * diff2 * vec3(texture(first_texture, aTexCoord));

  // specular
  vec3 reflectDir2 = reflect(-lightDir2, norm);
  float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), material.shininess);
  vec3 specular2 = light.specular * spec2 * vec3(texture(second_texture, aTexCoord));

  // result 2
  vec3 result2 = ambient + diffuse2 + specular2;
  result2 = result2 * 0.5;




  vec3 result = ambient + diffuse + specular;
  result = result * 0.5;

  result = result + result2;
  fragColor = vec4(result, 1.0);
}
